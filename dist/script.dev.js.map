{"version":3,"sources":["script.js"],"names":["document","addEventListener","getTeamIdFromUrl","urlParams","URLSearchParams","window","location","search","get","teamId","getElementById","textContent","fetchTeamData","fetch","response","ok","Error","status","json","teamData","console","error","populateTeamStats","teamName","league","coach","logoUrl","src","alt","statsTableBody","querySelector","innerHTML","Object","entries","statistics","statistic","value","row","createElement","statisticCell","valueCell","appendChild","rosterList","roster","forEach","player","listItem","achievementList","achievements","achievement"],"mappings":";;;;;;;;;;AAAAA,QAAQ,CAACC,gBAAT,CAA0B,kBAA1B,EAA8C,YAAM;AAEhD;AACA,WAASC,gBAAT,GAA4B;AACxB,QAAMC,SAAS,GAAG,IAAIC,eAAJ,CAAoBC,MAAM,CAACC,QAAP,CAAgBC,MAApC,CAAlB;AACA,WAAOJ,SAAS,CAACK,GAAV,CAAc,QAAd,CAAP;AACH;;AAED,MAAMC,MAAM,GAAGP,gBAAgB,EAA/B;;AAEA,MAAI,CAACO,MAAL,EAAa;AACTT,IAAAA,QAAQ,CAACU,cAAT,CAAwB,WAAxB,EAAqCC,WAArC,GAAmD,6BAAnD;AACA;AACH;;AAED,WAAeC,aAAf,CAA6BH,MAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CAE+BI,KAAK,sBAAeJ,MAAf,EAFpC;;AAAA;AAEcK,YAAAA,QAFd;;AAAA,gBAGaA,QAAQ,CAACC,EAHtB;AAAA;AAAA;AAAA;;AAAA,kBAIkB,IAAIC,KAAJ,+BAAiCF,QAAQ,CAACG,MAA1C,EAJlB;;AAAA;AAAA;AAAA,4CAM+BH,QAAQ,CAACI,IAAT,EAN/B;;AAAA;AAMcC,YAAAA,QANd;AAAA,6CAOeA,QAPf;;AAAA;AAAA;AAAA;AASQC,YAAAA,OAAO,CAACC,KAAR,CAAc,2BAAd;AACArB,YAAAA,QAAQ,CAACU,cAAT,CAAwB,WAAxB,EAAqCC,WAArC,GAAmD,kCAAnD;AAVR,6CAWe,IAXf;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeA,WAAeW,iBAAf,CAAiCH,QAAjC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,gBACSA,QADT;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAGInB,YAAAA,QAAQ,CAACU,cAAT,CAAwB,WAAxB,EAAqCC,WAArC,GAAmDQ,QAAQ,CAACI,QAA5D;AACAvB,YAAAA,QAAQ,CAACU,cAAT,CAAwB,aAAxB,EAAuCC,WAAvC,qBAAgEQ,QAAQ,CAACK,MAAzE;AACAxB,YAAAA,QAAQ,CAACU,cAAT,CAAwB,YAAxB,EAAsCC,WAAtC,oBAA8DQ,QAAQ,CAACM,KAAvE,EALJ,CAOI;;AACA,gBAAIN,QAAQ,CAACO,OAAb,EAAsB;AAClB1B,cAAAA,QAAQ,CAACU,cAAT,CAAwB,WAAxB,EAAqCiB,GAArC,GAA2CR,QAAQ,CAACO,OAApD;AACA1B,cAAAA,QAAQ,CAACU,cAAT,CAAwB,WAAxB,EAAqCkB,GAArC,aAA8CT,QAAQ,CAACI,QAAvD;AACH,aAXL,CAaI;;;AACMM,YAAAA,cAdV,GAc2B7B,QAAQ,CAACU,cAAT,CAAwB,aAAxB,EAAuCoB,aAAvC,CAAqD,OAArD,CAd3B;AAeID,YAAAA,cAAc,CAACE,SAAf,GAA2B,EAA3B,CAfJ,CAemC;;AAE/B,2CAAiCC,MAAM,CAACC,OAAP,CAAed,QAAQ,CAACe,UAAxB,CAAjC,qCAAsE;AAAA,2EAA1DC,SAA0D,0BAA/CC,KAA+C;AAC5DC,cAAAA,GAD4D,GACtDrC,QAAQ,CAACsC,aAAT,CAAuB,IAAvB,CADsD;AAE5DC,cAAAA,aAF4D,GAE5CvC,QAAQ,CAACsC,aAAT,CAAuB,IAAvB,CAF4C;AAGlEC,cAAAA,aAAa,CAAC5B,WAAd,GAA4BwB,SAA5B;AACMK,cAAAA,SAJ4D,GAIhDxC,QAAQ,CAACsC,aAAT,CAAuB,IAAvB,CAJgD;AAKlEE,cAAAA,SAAS,CAAC7B,WAAV,GAAwByB,KAAxB;AACAC,cAAAA,GAAG,CAACI,WAAJ,CAAgBF,aAAhB;AACAF,cAAAA,GAAG,CAACI,WAAJ,CAAgBD,SAAhB;AACAX,cAAAA,cAAc,CAACY,WAAf,CAA2BJ,GAA3B;AACH,aA1BL,CA4BI;;;AACMK,YAAAA,UA7BV,GA6BuB1C,QAAQ,CAACU,cAAT,CAAwB,aAAxB,CA7BvB;AA8BIgC,YAAAA,UAAU,CAACX,SAAX,GAAuB,EAAvB,CA9BJ,CA8B+B;;AAC3BZ,YAAAA,QAAQ,CAACwB,MAAT,CAAgBC,OAAhB,CAAwB,UAAAC,MAAM,EAAI;AAC9B,kBAAMC,QAAQ,GAAG9C,QAAQ,CAACsC,aAAT,CAAuB,IAAvB,CAAjB;AACAQ,cAAAA,QAAQ,CAACnC,WAAT,GAAuBkC,MAAvB;AACAH,cAAAA,UAAU,CAACD,WAAX,CAAuBK,QAAvB;AACH,aAJD,EA/BJ,CAqCK;;AACKC,YAAAA,eAtCV,GAsC4B/C,QAAQ,CAACU,cAAT,CAAwB,kBAAxB,CAtC5B;AAuCIqC,YAAAA,eAAe,CAAChB,SAAhB,GAA4B,EAA5B,CAvCJ,CAuCoC;;AAChCZ,YAAAA,QAAQ,CAAC6B,YAAT,CAAsBJ,OAAtB,CAA8B,UAAAK,WAAW,EAAI;AACzC,kBAAMH,QAAQ,GAAG9C,QAAQ,CAACsC,aAAT,CAAuB,IAAvB,CAAjB;AACAQ,cAAAA,QAAQ,CAACnC,WAAT,GAAuBsC,WAAvB;AACAF,cAAAA,eAAe,CAACN,WAAhB,CAA4BK,QAA5B;AACH,aAJD;;AAxCJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GA9BgD,CA6EhD;;;AACA,GAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CAC0BlC,aAAa,CAACH,MAAD,CADvC;;AAAA;AACSU,YAAAA,QADT;AAAA;AAAA,4CAESG,iBAAiB,CAACH,QAAD,CAF1B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD;AAKH,CAnFD","sourcesContent":["document.addEventListener('DOMContentLoaded', () => {\r\n\r\n    // Function to extract team ID from the URL\r\n    function getTeamIdFromUrl() {\r\n        const urlParams = new URLSearchParams(window.location.search);\r\n        return urlParams.get('teamId');\r\n    }\r\n\r\n    const teamId = getTeamIdFromUrl();\r\n\r\n    if (!teamId) {\r\n        document.getElementById('team-name').textContent = 'Error: No team ID provided.';\r\n        return;\r\n    }\r\n\r\n    async function fetchTeamData(teamId) {\r\n        try {\r\n            const response = await fetch(`/api/teams/${teamId}`);  // Replace with your actual API endpoint\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n            const teamData = await response.json();\r\n            return teamData;\r\n        } catch (error) {\r\n            console.error('Error fetching team data:', error);\r\n            document.getElementById('team-name').textContent = 'Error: Could not load team data.';\r\n            return null;\r\n        }\r\n    }\r\n\r\n    async function populateTeamStats(teamData) {\r\n        if (!teamData) return;\r\n\r\n        document.getElementById('team-name').textContent = teamData.teamName;\r\n        document.getElementById('team-league').textContent = `League: ${teamData.league}`;\r\n        document.getElementById('team-coach').textContent = `Coach: ${teamData.coach}`;\r\n\r\n        // Optional: Set team logo if you have a URL\r\n        if (teamData.logoUrl) {\r\n            document.getElementById('team-logo').src = teamData.logoUrl;\r\n            document.getElementById('team-logo').alt = `${teamData.teamName} Logo`;\r\n        }\r\n\r\n        // Populate statistics table\r\n        const statsTableBody = document.getElementById('stats-table').querySelector('tbody');\r\n        statsTableBody.innerHTML = ''; // Clear existing rows\r\n\r\n        for (const [statistic, value] of Object.entries(teamData.statistics)) {\r\n            const row = document.createElement('tr');\r\n            const statisticCell = document.createElement('td');\r\n            statisticCell.textContent = statistic;\r\n            const valueCell = document.createElement('td');\r\n            valueCell.textContent = value;\r\n            row.appendChild(statisticCell);\r\n            row.appendChild(valueCell);\r\n            statsTableBody.appendChild(row);\r\n        }\r\n\r\n        // Populate roster list\r\n        const rosterList = document.getElementById('roster-list');\r\n        rosterList.innerHTML = ''; // Clear existing list items\r\n        teamData.roster.forEach(player => {\r\n            const listItem = document.createElement('li');\r\n            listItem.textContent = player;\r\n            rosterList.appendChild(listItem);\r\n        });\r\n\r\n         // Populate achievements list\r\n        const achievementList = document.getElementById('achievement-list');\r\n        achievementList.innerHTML = ''; // Clear existing list items\r\n        teamData.achievements.forEach(achievement => {\r\n            const listItem = document.createElement('li');\r\n            listItem.textContent = achievement;\r\n            achievementList.appendChild(listItem);\r\n        });\r\n    }\r\n\r\n    // Main execution flow\r\n    (async () => {\r\n        const teamData = await fetchTeamData(teamId);\r\n        await populateTeamStats(teamData);\r\n    })();\r\n\r\n});\r\n\r\n\r\n\r\n"],"file":"script.dev.js"}